

说明：
channel.basicQos(1)：限制发送给同一个消费者不超过1条消息，每个消费者发送确认收到消息之前，消息队列不发送下一个消息到消费者，保证一次只处理一个消息。


相比简单队列的改动：
*channel.basicQos(1)：保证一次只分发一条消息。
*channel.basicAck(envelope.getDeliveryTag(), false)：手动确认消息。false表示确认接收消息，true表示拒绝接收消息。
*channel.basicConsume(QUEUE, false, consumer)：设置自动应答为false。

=====生产者：

public class WorkSender {

    private static final String QUEUE = "test_work_queue";

    public static void main(String[] args) {
        Connection con = null;
        Channel channel = null;
        try {
            // 获取连接
            con = ConnectionUtils.getConnection();
            // 从连接中创建通道
            channel = con.createChannel();
            // 声明一个队列
            channel.queueDeclare(QUEUE, false, false, false, null);
            // 每个消费者发送确认收到消息之前,消息队列不发送下一个消息到消费者,一次只处理一个消息
            // 限制发送给同一个消费者不超过1条消息
            channel.basicQos(1);
            // 发送50条消息
            for (int i = 0; i < 50; i++) {
                // 消息内容
                String msg = "work queue " + i;
                // 发送消息
                channel.basicPublish("", QUEUE, null, msg.getBytes());
                try {
                    Thread.sleep(i * 20);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            System.out.println("send success");
        } catch (IOException e) {
            e.printStackTrace();
        } catch (TimeoutException e) {
            e.printStackTrace();
        } finally {
            // 关闭连接
            ConnectionUtils.close(channel, con);
        }
    }
}

=====消费者：

public class WorkRecver {

    private static final String QUEUE = "test_work_queue";

    public static void main(String[] args) throws IOException, TimeoutException {
        // 获取连接
        Connection con = ConnectionUtils.getConnection();
        // 从连接中创建通道
        final Channel channel = con.createChannel();
        // 声明队列
        channel.queueDeclare(QUEUE, false, false, false, null);
        // 保证一次只收到一条消息
        channel.basicQos(1);
        // 创建消费者
        Consumer consumer = new DefaultConsumer(channel) {
        
            @Override
            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) {
            
		    try{
		        String msg = new String(body, "utf-8");
		        System.out.println("Recver1接收到消息——" + msg);
		    } catch (IOException e) {
		            e.printStackTrace();
		    }finally {
			    // 手动确认消息
			    channel.basicAck(envelope.getDeliveryTag(), false);
		    }
            }
        };
        // 监听队列
        channel.basicConsume(QUEUE, false, consumer);
    }
}


将消息发送给fanout交换机，交换机会将它分发给所有绑定该交换机的队列

===================sender：
//信道声明交换机，发送消息到交换机，routekey设置为空（因为是发送到所有绑定队列）
public class FanoutSender {
    /**
     * 交换机名称
     */
    private static final String EXCHANGE = "test_exchange_fanout";

    public static void main(String[] args) {
        Connection con = null;
        Channel channel = null;
        try {
            // 获取连接
            con = ConnectionUtils.getConnection();
            // 从连接中创建通道
            channel = con.createChannel();
            // 声明交换机,采用fanout（分发）类型
            channel.exchangeDeclare(EXCHANGE, BuiltinExchangeType.FANOUT,false,false,null);
            // 消息
            String msg = "你好 exchange fanout!";
            // 发送消息
            channel.basicPublish(EXCHANGE, "", null, msg.getBytes());
            System.out.println("send success");
        } catch (IOException e) {
            e.printStackTrace();
        } catch (TimeoutException e) {
            e.printStackTrace();
        } finally {
            // 关闭连接
            ConnectionUtils.close(channel, con);
        }
    }
}

=================recver：
//信道声明队列（设置name），绑定交换机，表示从该交换机的指定name队列取消息
public class FanoutRecver {
    /**
     * 交换机名称
     */
    private static final String EXCHANGE = "test_exchange_fanout";
    private static final String QUEUE = "test_queue_email";

    public static void main(String[] args) throws IOException, TimeoutException {
        // 获取连接
        Connection con = ConnectionUtils.getConnection();
        // 从连接中创建通道
        final Channel channel = con.createChannel();
        // 声明队列
        channel.queueDeclare(QUEUE, true, false, false, null);
        // 绑定交换机
        channel.queueBind(QUEUE, EXCHANGE, "");
        // 保证一次只分发一条消息
        channel.basicQos(1);
        // 创建消费者
        Consumer consumer = new DefaultConsumer(channel) {

            // 获取消息
            @Override
            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body)
                    throws IOException {
                String msg = new String(body, "utf-8");
                System.out.println("Recver1接收到消息——" + msg);
                // 手动确认消息
                channel.basicAck(envelope.getDeliveryTag(), false);
            }

        };
        // 监听队列
        channel.basicConsume(QUEUE, false, consumer);
    }
}


理解：
主体有交换机、消息队列、消息，一个交换机可以绑定多个队列，消息存放在队列中。
当交换机和消息队列绑定时，可以设置该队列的routekey（该routekey仅在该交换机中有用）。
声明消息队列时，会将其自动绑定到默认交换机""，并设置routekey为队列的name。

生产者将消息给交换器，交换器会根据消息的routekey将其转交给绑定了该交换机且对应routekey的队列。
消费者根据队列的name来取出队列的消息。

===========所有模式相同过程：
====生产者：
向指定交换机指定队列发送消息；
channel.basicPublish("交换机name", "消息的routekey", null, message.getBytes());
====消费者：
声明一个信道Cosumer及设置好它的监听器，再设置监听的消息队列；
channel.basicConsume("队列name", false,Consumer对象);

====注意：
声明队列时，会自动绑定到默认交换机""，且绑定的routekey为默认为队列name；
在生产者和消费者工作前，声明好交换机及消息队列；如果交换机不存在，则会报错；如果没有匹配的消息队列或消息队列不存在，则交换机会将其消息丢弃；

===========简单模式：
生产者声明一个队列（routekey默认为队列名），该队列会默认绑定到默认交换机。发送消息时指定处理的交换机（""）和routekey （队列名）。
消费者声明要接受消息的队列（默认为绑定在在默认交换机），然后设置监听器接受消息。

===========fanout模式：
生产者声明一个fanout类型的交换机，直接将信息发送到这个交换机（交换机制定为刚声明的，设置消息routekey为""）。
消费者声明要接受消息的队列，绑定指定交换机（设置routekey为""），然后设置监听器接受消息。

===========driect模式：
生产者声明一个direct类型的交换机，直接将信息发送到这个交换机（交换机制定为刚声明的，设置消息routekey）
消费者声明要接受消息的队列，绑定指定交换机(设置队列routekey)，然后设置监听器接受消息。

===========topic模式：
绑定键：
#：匹配0个多个标识符。lazy.#
*：匹配1个标识符。*.*.rabbit
标识符：
lazy.orange.rabbit

生产者声明一个topic类型的交换机，直接将信息发送到这个交换机（交换机制定为刚声明的，设置消息routekey标识符）
消费者声明要接受消息的队列，绑定指定交换机(设置队列routekey的匹配模式)，然后设置监听器接受消息。

===========函数说明
//创建交换机
channel.exchangeDeclare("交换机name", BuiltinExchangeType.TOPIC, false, false, null);
参数2：
BuiltinExchangeType.FANOUT
BuiltinExchangeType.DIRECT
BuiltinExchangeType.TOPIC

//创建队列
channel.queueDeclare("队列name", false, false, false, null);
 * 参数1：队列名称
 * 参数2：为true时server重启队列不会消失，消息持久化
 * 参数3：队列是否是独占的，如果为true只能被一个connection使用，其他连接建立时会抛出异常
 * 参数4：队列不再使用时是否自动删除（没有连接，并且没有未处理的消息)
 * 参数5：建立队列时的其他参数
 
//绑定交换机和队列，并设置队列的routekey
channel.queueBind("队列name", "交换机name", "routekey");
 
//发送消息给指定交换机，并设置消息的routing key，交换机会根据消息的routekey分派到指定队列
channel.basicPublish("交换机name", "routing key", null, message.getBytes());
 * 参数1：exchange名字，若为空则使用默认的exchange
 * 参数2：routing key
 * 参数3：其他的属性
 * 参数4：消息体
 * RabbitMQ默认有一个exchange，叫default exchange，它用一个空字符串表示，它是direct exchange类型，
 * 任何发往这个exchange的消息都会被路由到routing key的名字对应的队列上，如果没有对应的队列，则消息会被丢弃

// 保证一次只分发一条消息给消费者
channel.basicQos(1);

//设置Customer对消息的消费行为
Consumer consumer = new DefaultConsumer(channel) {
            // 获取消息
            @Override
            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body)
                    throws IOException {
                String msg = new String(body, "utf-8");
                System.out.println("Recver2接收到消息——" + msg);
                // 手动确认消息
                channel.basicAck(envelope.getDeliveryTag(), false);
            }

        };

//设置监听的队列和消费者
channel.basicConsume("队列name", true, consumer);
*参数1：监听的队列名称
*参数2：true为自动确认消息，false为手动确认
*参数3：设置消费者

//手动确认消息，与basicConsume参数2设置为false时使用
channel.basicAck(envelope.getDeliveryTag(), false);



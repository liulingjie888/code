
其他:
+ 运算符用于把文本值或字符串变量加起来（连接起来）。

======属性:
constructor	返回创建字符串属性的函数
length		返回字符串的长度
prototype	允许您向对象添加属性和方法
var y = new String("John");	//不要创建 String 对象。它会拖慢执行速度，并可能产生其他副作用

======方法:
String.fromCharCode(ascll码)		#返回ASCII码转换的字符

lengh
indexOf(子字符串[, startIndex])	#从前向后检索字符串
lastIndexOf(子字符串 [,startIndex])	#从后向前检索字符串
substr(startIndex [,length])		#根据下标和长度获取子字符串
substring(startIndex [,endIndex])	#根据下标获取子字符串
includes("world")			#查找字符串中是否包含指定的子字符串。
split(separator [ ,limitInteger])	#获取以分隔符separator分割字符串的字符数组
search(substr)				#返回子字符串或符合正则表达式的下标
replace(substr,replacement)		#替换匹配的子字符串
toLowerCase()				#将字符串转换成小写返回
toUpperCase()				#将字符串转换成小写返回
localeCompare()			#用本地特定的顺序比较两个字符串
valueOf()				#返回某个字符串对象的原始值。
charAt(index)				#返回在指定位置的字符。
charCodeAt(index)			#返回在指定的位置的字符的 Unicode 编码。
concat(字符串)				#连接字符串，并返回新的字符串。
fromCharCode(65)			#将 Unicode 编码转为字符。
match((/ain/g)				#查找找到一个或多个正则表达式的匹配。
repeat(2)				#复制字符串指定次数，并将它们连接在一起返回。
replace("Microsoft","Runoob")		#在字符串中查找匹配的子串， 并替换与正则表达式匹配的子串。
search("Runoob")			#返回与正则表达式相匹配的下标
slice(1,5)				#提取字符串的片断	
split(",")				#把字符串分割为字符串数组。
startsWith("Hello")			#查看字符串是否以指定的子字符串开头。
trim()					#去除字符串两边的空白
toLocaleLowerCase()			#根据本地主机的语言环境把字符串转换为小写。
toLocaleUpperCase()			#根据本地主机的语言环境把字符串转换为大写。
valueOf()				#返回某个字符串对象的原始值。
toString()				#返回一个字符串。

============转义字符
\'	单引号
\"	双引号
\\	斜杆
\n	换行
\r	回车
\t	tab
\b	空格
\f	换页

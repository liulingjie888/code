=========================创建方式
1: 常规方式:
var myCars=new Array();
myCars[0]="Saab";      
myCars[1]="Volvo";
myCars[2]="BMW";

2: 简洁方式:
var myCars=new Array("Saab","Volvo","BMW");

3: 字面:
var myCars=["Saab","Volvo","BMW"];


=========================方法
concat(数组1,数组2,...)	#连接两个或更多的数组，并返回结果。
copyWithin(target,start[,end]) #从数组的指定位置拷贝元素到数组的另一个指定位置中。
toString()			#把数组转换为字符串，并返回结果。
unshift()			#向数组的开头添加一个或更多元素，并返回新的长度。
valueOf()			#返回数组对象的原始值。
fill("Runoob")			#使用一个固定值来填充数组。
findIndex()			#返回符合传入测试（函数）条件的数组元素索引。
from("Apple")			#通过给定的对象中创建一个数组。
includes("Apple")		#判断一个数组是否包含一个指定的值。
indexOf("Apple")		#搜索数组中的元素，并返回它所在的位置。
lastIndexOf()			#搜索数组中的元素，并返回它最后出现的位置。
isArray(fruits)		#判断对象是否为数组。
join()				#把数组的所有元素放入一个字符串返回
keys()				#返回数组的可迭代对象，包含原始数组的键(key)。
reverse()			#反转数组的元素顺序。
shift()			#删除并返回数组的第一个元素。
slice(1,3)			#选取数组的的一部分，并返回一个新数组。
sort()				#对数组的元素进行排序。
pop()				#删除数组的最后一个元素并返回删除的元素。
push()				#向数组的末尾添加一个或更多元素，并返回新的长度。

======entries()			#返回数组的可迭代对象。
迭代对象中数组的索引值作为 key， 数组元素作为 value。
[0, "Banana"]
[1, "Orange"]
[2, "Apple"]
[3, "Mango"]

======every()		#检测数值元素的每个元素是否都符合条件。
检测数组 ages 的所有元素是否都大于等于 18 :
var ages = [32, 33, 16, 40];
function checkAdult(age) {
    return age >= 18;
}
function myFunction() {
    document.getElementById("demo").innerHTML = ages.every(checkAdult);
}
输出结果为:
false

======filter()		#检测数值元素，并返回符合条件所有元素的数组。
返回数组 ages 中所有元素都大于 18 的元素:
var ages = [32, 33, 16, 40];
function checkAdult(age) {
    return age >= 18;
}
function myFunction() {
    document.getElementById("demo").innerHTML = ages.filter(checkAdult);
}
输出结果为:
32,33,40

======find()		#返回符合传入测试（函数）条件的数组元素。
获取数组中年龄大于 18 的第一个元素
var ages = [3, 10, 18, 20];
function checkAdult(age) {
    return age >= 18;
}
function myFunction() {
    document.getElementById("demo").innerHTML = ages.find(checkAdult);
}
fruits 输出结果：
18

======forEach()	#数组每个元素都执行一次回调函数。
<button onclick="numbers.forEach(myFunction)">点我</button>
<p id="demo"></p>
<script>
demoP = document.getElementById("demo");
var numbers = [4, 9, 16, 25];
function myFunction(item, index) {
    demoP.innerHTML = demoP.innerHTML + "index[" + index + "]: " + item + "<br>"; 
}
</script>
输出结果：
index[0]: 4
index[1]: 9
index[2]: 16
index[3]: 25

======map()		#通过指定函数处理数组的每个元素，并返回处理后的数组。
返回一个数组，数组中元素为原始数组的平方根:
var numbers = [4, 9, 16, 25];
function myFunction() {
    x = document.getElementById("demo")
    x.innerHTML = numbers.map(Math.sqrt);
}
输出结果为:
2,3,4,5

======reduce()		#将数组元素计算为一个值（从左到右）。
计算数组元素相加后的总和：
var numbers = [65, 44, 12, 4];
function getSum(total, num) {
    return total + num;
}
function myFunction(item) {
    document.getElementById("demo").innerHTML = numbers.reduce(getSum);
}
输出结果：
125

reduceRight()		#将数组元素计算为一个值（从右到左）。

======some()			#检测数组元素中是否有元素符合指定条件。
检测数组中是否有元素大于 18:
var ages = [3, 10, 18, 20];
function checkAdult(age) {
    return age >= 18;
}
function myFunction() {
    document.getElementById("demo").innerHTML = ages.some(checkAdult);
}
输出结果为:
true

======splice()		#从数组中添加或删除元素。
数组中添加新元素：
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(2,0,"Lemon","Kiwi");		//从下标2开始删除0个元素后再添加后面的元素
fruits 输出结果：
Banana,Orange,Lemon,Kiwi,Apple,Mango



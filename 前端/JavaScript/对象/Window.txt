结构图
			window---------------------frames
			     |
            |-------------|-------------|-----------|-----------|
     navigator      location       document	  screen        history
			     |
               |------------|------------|-----------|-----------|-----------|
           forms        anchors       images        links        embeds      applets


document.forms[0].user.value;	网页第一个表单中name属性为user元素的value值
document.forms["data"].mail;		名称为data的表单中name属性为mail的值
document.表单名或ID.input名或ID.属性		表示指定表单控件属性的值
======
location.href="URL或网站"		#使浏览器跳到该网页
location.replace("URL或网站");	#功能一样，只是不能返回上一网页
location.assign("URL或网站");		#加载新的文档进来(就相当于一个链接，跳转到指定的url)
location.hostname 			#返回 web 主机的域名
location.pathname 			#返回当前页面的路径和文件名(如:/js/js-window-location.html)
location.port 				#返回 web 主机的端口 （80 或 443）
location.protocol 			#返回所使用的 web 协议（http: 或 https:）
=====
history.back();		#网页后退
history.go(-1);
history.forward();		#网页前进
history.go(1);
location.reload()		#刷新网页
history.go(0)	
history.length			#浏览器历史记录总数
======
screen.availWidth		#可用的屏幕宽度
screen.availHeight		#可用的屏幕高度
======
window对象：浏览器窗口
window.moveBy(x,y);		#窗口移动到相对原来位置坐标处
window.moveTo(x,y);		#移动到指定坐标位置
window.close();		#关闭窗口
window.open();			#打开窗口
window.status="内容";		#修改状态栏内容
window.open("URL或网站","new","width=400,height=300");	#打开新窗口

window.parent			#返回父窗口对象引用
window.self			#返回当前窗口引用
window.top			#返回最顶层窗口引用
window.outerWidth		#窗口外部的宽和高
window.outerHeight	
window.innerWidth		#窗口文档显示区域的宽和高(包括滚动条)
window.innnerHeight
======
#对于 Internet Explorer 8、7、6、5,	 窗口文档显示区域的宽和高
document.documentElement.clientHeight
document.documentElement.clientWidth
或者
document.body.clientHeight
document.body.clientWidth
======
navigator.appCodeName		#浏览器代号
navigator.appName		#浏览器名称
navigator.appVersion		#浏览器版本
navigator.cookieEnabled	#启用Cookies
navigator.platform		#硬件平台
navigator.userAgent		#用户代理
navigator.systemLanguage	#用户代理语言
注意:
来自 navigator 对象的信息具有误导性，不应该被用于检测浏览器版本，这是因为：
1.navigator 数据可被浏览器使用者更改
2.一些浏览器对测试站点会识别错误
3.浏览器无法报告晚于浏览器发布的新操作系统
======
系统对话框
alert("警告内容");		#警告框
confirm("确认内容");		#确认提示框,按确认返回true；取消返回false
var 变量=prompt("请输入你的名字：","");	#输入返回给变量

=======================================变量区别
定义全局变量与在 window 对象上直接定义属性差别。

1、全局变量不能通过 delete 操作符删除；而 window 属性上定义的变量可以通过 delete 删除
var num=123;
window.str="string";
delete num;
delete str;
console.log(num); 	//123
console.log(str); 	//str is not defined
//全局变量不能通过 delete 删除，因为通过 var 定义全局变量会有一个名为 [Configurable] 的属性，默认值为 false，所以这样定义的属性不可以通过 delete 操作符删除

2、访问未声明的变量会抛出错误，但是通过查询 window 对象，可以知道某个可能未声明的变量是否存在。
var newValue=oldValue; 	// 报错：oldValue is not defined
var newValue=window.oldValue; // 不会报错
console.log(newValue); 	// undefined

3、有些自执行函数里面的变量，想要外部也访问到的话，在 window 对象上直接定义属性。






弹性子元素通常在弹性盒子内一行显示。默认情况每个容器只有一行,从左到右:
display: flex;
=====
如果我们设置 direction 属性为 rtl (right-to-left),弹性子元素的排列方式也会改变，页面布局也跟着改变:
body {
    direction: rtl;
}
======
flex-direction:row		#横向从左到右排列（左对齐），默认的排列方式。
row-reverse			#反转横向排列（右对齐，从后往前排，最后一项排在最前面。
column				#纵向排列。
column-reverse			#反转纵向排列，从后往前排，最后一项排在最上面。
=====
flex-wrap:nowrap 		#默认， 弹性容器为单行。
wrap 				#弹性容器为多行
wrap-reverse 			#垂直反转 wrap 排列。
=====
flex-flow:row-reverse wrap;	#flex-direction 和 flex-wrap 的简写
=====
justify-content 属性:
flex-start：
弹性项目向行头紧挨着填充。这个是默认值。第一个弹性项的main-start外边距边线被放置在该行的main-start边线，而后续弹性项依次平齐摆放。
flex-end：
弹性项目向行尾紧挨着填充。第一个弹性项的main-end外边距边线被放置在该行的main-end边线，而后续弹性项依次平齐摆放。
center：
弹性项目居中紧挨着填充。（如果剩余的自由空间是负的，则弹性项目将在两个方向上同时溢出）。
space-between：
弹性项目平均分布在该行上。如果剩余空间为负或者只有一个弹性项，则该值等同于flex-start。否则，第1个弹性项的外边距和行的main-start边线对齐，而最后1个弹性项的外边距和行的main-end边线对齐，然后剩余的弹性项分布在该行上，相邻项目的间隔相等。
space-around：
弹性项目平均分布在该行上，两边留有一半的间隔空间。如果剩余空间为负或者只有一个弹性项，则该值等同于center。否则，弹性项目沿该行分布，且彼此间隔相等（比如是20px），同时首尾两边和弹性容器之间留有一半的间隔（1/2*20px=10px）。
=====
align-content 属性:
stretch  		#默认。各行将会伸展以占用剩余的空间。
flex-start  		#各行向弹性盒容器的起始位置堆叠。
flex-end 		#各行向弹性盒容器的结束位置堆叠。
center 		#各行向弹性盒容器的中间位置堆叠。
space-between 		#各行在弹性盒容器中平均分布。
space-around 		#各行在弹性盒容器中平均分布，两端保留子元素与子元素之间间距大小的一半。
=====
align-items 属性:
flex-start：		#弹性盒子元素的y起始位置的边界紧靠住该行的y起始边界。
flex-end：		#弹性盒子元素的y起始位置的边界紧靠住该行的y结束边界。
center：		#弹性盒子元素在该行的y上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。
baseline：		#如弹性盒子元素的行内y与y轴为同一条，则该值与'flex-start'等效。其它情况下，该值将参与基线对齐。
stretch：		#如果指定侧轴大小的属性值为'auto'，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照'min/max-width/height'属性的限制。

=====
order: -1; 		#定义排列顺序，数值小的排在前面。可以为负值。
=====
align-self:auto	#如果'align-self'的值为'auto'，则其计算值为元素的父元素的'align-items'值，如果其没有父元素，则计算值为'stretch'。
flex-start		#弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。
flex-end		#弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。
center			#弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。
baseline		#如弹性盒子元素的行内轴与侧轴为同一条，则该值与'flex-start'等效。其它情况下，该值将参与基线对齐。
stretch		#如果指定侧轴大小的属性值为'auto'，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照'min/max-width/height'属性的限制。

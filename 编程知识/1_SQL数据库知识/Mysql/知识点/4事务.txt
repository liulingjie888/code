
===============锁
lock tables read [local] | [low_priority] write;		//获取表的读锁
unlock talbes;					//释放所有的表锁，如果客户端会断开隐式释放锁

MYSQL5.7：
select语句 lock in share mode;   	 	//添加共享锁
select语句 for udate;           	  	//添加排他锁

MYSQL8.0：
select语句 for share;      	       	//添加共享锁
select语句 for update [nowait | skip locked]    //nowait表示有锁等待一定时间后会返回错误，skip locked跳过被锁定的行直接更新其他行
===============事务
start transaction | begin [work]			//开启事务
commit	[work]  [and {[no] chain | [no] release} ]	//提交事务,chain表示执行之后立马开启一个同级事务
rollback [work]  [and {[no] chain | [no] release} ]	//回滚,release表示执行后立马断开连接
set autocommit = 0|1					//是否开启自动提交

savepoint 保存点名;		//设置保存点名 
rollback to savepoint 保持点	//回滚到保存点

set autocommit;		//关闭自动提交事务
set session transaction isolation level read committed;	//设置session事物级别
===============分布式事务


分布式事务涉及到一个或多个资源管理器（RM）和一个事务管理器（TM）。
资源管理器用于提供通向事务资源的途径。
事务管理器用于协调作为一个分布式事务一部分的事务。

分布式事务过程的两个阶段：
第一阶段，所有分支被预备好。即他们被TM告知准备要提交。
第二阶段，TM告知RMs是否要提交或回滚。如果预备分支时，所有的事务指示它们能够提交，则所有事务被告知提交;如果在预备时，有任何分支指示它将不能提交，则所有分支被告知回滚。

缺点:

（1）单点问题:事务管理器在整个流程中扮演的角色很关键，如果其宕机，比如在第一阶段已经完成，在第二阶段正准备提交的时候事务管理器宕机，资源管理器就会一直阻塞，导致数据库无法使用。
（2）同步阻塞:在准备就绪之后，资源管理器中的资源一直处于阻塞，直到提交完成，释放资源。
（3）数据不一致:两阶段提交协议虽然为分布式数据强一致性所设计，但仍然存在数据不一致性的可能，比如在第二阶段中，假设协调者发出了事务commit的通知，但是因为网络问题该通知仅被一部分参与者所收到并执行了commit操作，其余的参与者则因为没有收到通知一直处于阻塞状态，这时候就产生了数据的不一致性。


语法：
xa start | begin '分布式事务标识','分支限定符'[,1];	//启动一个分布式事务的一个分支事务
		
xa end '分布式事务标识','分支限定符';			//进入第一阶段
xa prapare '分布式事务标识','分支限定符';

xa commit '分布式事务标识','分支限定符' [one phase];	//提交

xa recover;		//返回处于prepare状态的分支事务的详细信息







==========================explain SQL语句

(1)select_type（表示select的类型）：
SIMPLE：即不使用表连接或子查询。
PRIMARY：主查询，即外层的查询。
UNION：UNION中的第二个或者后面的查询语句。
SUBQUERY：子查询中的第一个SELECT

(2)table：输出结果集的表

(3)type:
ALL：全表扫描
index：索引全扫描
range：索引范围扫描
ref：非唯一索引扫描或唯一索引的前缀扫描
eq_ref：类似ref，区别就在使用的索引是唯一索引且一定是多表连接，就是多表连接中使用primarykey或uniqueindex作为关联条件。
const/system： const表示单表的唯一索引，system表示单表只有一个记录
null：不用访问表和索引直接能得到结果

其他：
ref_or_null：和ref类似，区别是包含对NU LL查询
index_merge：索引合并优化
	Index merge算法有 3 种变体：例子给出最基本常见的方式：
	对 AND 取交集:index_merge_intersection:Using intersect(b,a)
	对 AND 和 OR 的组合取并集:Using sort_union(order_status,buyer_id)
	对 OR 取并集 :Using union(order_status,buyer_id)
unique_subquery：in的后面是一个查询主键字段的子查询
index_subquery：与unique_subquery类似，去表是后面为非唯一所以字段的子查询

（4）possible_keys：表示查询时可能使用的索引
（5）key：表示实际使用的索引
（6）key_len：使用到的索引字段的长度
（7）rows：扫描行的数量
（8）Extra：执行情况的说明和描述
using index;		没有回表
using where;		回表
using filesort;	进行了一个排序操作（频繁进行会消耗性能）
using MRR		是否使用了MRR特性
using join buffer(batched key access)	使用了BKA算法
==========================explain partitions SQL语句
相比上面多了分区的查询

==========================show profile

select @@have_profiling;	//查看是否支持profile

select @@profiling;		//查看是否开启(默认关闭)

set profiling=1;		//开启

show profiles;			//查看执行语句的时间和id信息
show profile [cpu] [for query ID号];	//查看上一次执行语句[或指定语句]的执行信息,也可以查看cpu信息

how profile source for query ID号;	//查看执行过程每个步骤对应的源码文件

==========================trace

set optimizer_trace="enabled=on",end_markers_in_json=on;	//打开trace
 
set optimizer_trace_max_mem_size=1000000;			//设置最大能够使用内存大小

select * from information_schema.optimizer_trace;		//查看上一个语句执行情况

=========================用到索引的条件

1.where用到的字段刚好都在索引中且为=，如果为范围>则会使用到其他字段的索引的并集
2.单个字段索引的字段的范围查找
3.最左原则
4.覆盖索引：查询的字段刚好在条件字段的索引中，不用回表操作
5.匹配列前缀：如titile like 'african%';	 //其中title(10)创建了前缀文本索引
6.实现索引的部分匹配而其他部分进行范围匹配。
7.字段是索引则column_name is null会使用到索引
8.explain select * from rental where rental_date='2006-02-14 14:16:03' and customer_id>=300 and customer_id<=400;
其中rental_date,inventory_date,custoemr_id创建了复合索引，版本5.6以下：
先在索引根据rental_date筛选出然后回表找出记录，再在记录中进行customer_id的筛选。
版本5.7用了ICP（index condition pushdown）：
直接在索引中根据rental_date和custoemrmer_id筛选出然后回表找出记录就行。

不会用到索引的条件：
1.以%开头的like查询不会走索引。可以通过创建该字段的索引然后用覆盖索引找出记录id，再进行内表连接。
2.数据类型隐式转换不会使用索引
3.不满足最左原则
4.如果查询索引扫描的记录大于全表扫描（mysql优化器估算），则使用全表扫描。将查询的值设置为一个选择率更高的值，优化器会更倾向与使用索引。
5.如果使用or条件，一个有索引一个没有索引则会选择全表扫描，必须全部都用到索引才会走索引（，然后进行UNION操作）

=========================优化
analyze table 表名;		//使系统得到准确的统计信息，使得SQL能够生成正确的执行计划。使用时会对表使用读取锁

check table 表名;		//检查视图是否有错误

optimize table 表名;		//如果表结构有大部分更改，可以使用该命令优化表，MyISAM会全程锁表，而InnoDB会转换成重构表和分析表两个操作，加锁只在prepare和commit阶段。几乎没有影响。

alter table 表名 engin=innodb; //删除大量数据后，使用该方法回收空间

=======大批插入数据优化
myIsam表下：
alter table 表名 disable keys; //关闭非唯一索引的更新
load data infile '' into table 表名;	//导入数据
alter table 表名 enable keys;	//打开

InnoDB表下：
1.导入数据进行主键排序后，导入更快
2.关闭唯一性校验：
set unique_check=0;
导入数据
set unique_check=1;
3.关闭事物自动提交

=======insert语句优化
p35

=======order by语句优化
避开filesort
1.where和order by使用相同的索引，并且order by的字段顺序和索引顺序相同，且都为降序或都为升序。
2.使用索引的排序性加上覆盖索引操作。
优化filesort
1.两次扫描算法（p238），内存（sort_buffer_size）开销小
2.一次扫描算法（p238），内存开销大，排序效率高

=======group by语句优化
默认会根据字段进行排序，加上order by null就可以取消排序操作

=======join优化
NLJ(Nested-Loop Join)
BNL(Block Nested-Loop Join)，使用条件为join类型是all/index/range，也就是内表不使用索引或索引效率很低
BKA(Batched Key Access)&&MRR(Multi Range Read),join类型为ref或eq_ref，索引不能是主键且有回表操作
MRR:通过辅助索引获取范围数据存入read_rnd_buffer_size，然后通过主键排序，最后再回表。使得随机io变成顺序io，提高性能。

内嵌优化：
select * from customer where customer_id not in(select customer_id from payment);				//使用到了临时表
优化：
select * from customer a fleft join payment b on a.customer_id=b.customer_id where b.customer_id is null;	//因为不需要创建临时表

=======分页优化
第一种：
select film_id,description from film order by title limit 50,5
优化：
select a.film_id, a.description from film a inner join (select film_id from film order by title limit 50,5)b on a.film_id=b.film_id;
覆盖索引再进行内连接

第二种：
通过上一页最后一行的id来进行范围查找，但排序字段出现大量重复值可能会对是部分记录。


============================使用SQL提示
select sql_buffer_results * from ...		//强制生成临时结果集，所有对应表上的锁均被释放

select语句 use index (索引名)	where ...	//建议使用指定索引
select语句 ignore index (索引名) where ...	//忽略指定索引
select语句 force index (索引名) where ...	//强制使用指定索引

============================直方图
通常用在一些唯一值较少、数据分布不均匀、查询较为频繁、没有创建索引的字段。
analyze table 表名 update histogram on 字段[,...] [with 数量 buckets]	//buckets为存放不同数量的桶数，默认100
analyze table 表名 drop histogram on 字段[,...]				//删除





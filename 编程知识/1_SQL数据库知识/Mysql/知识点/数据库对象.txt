
=======================视图

create [or replace] [algorithm={undefined | merge | temptable}]
view 视图名 [(column_list)]
as 
	select语句
[with [cascaded | local] check option]	//local只要满足本视图的条件就可以更新，cascaded则满足所有视图条件才更新

algorithm：
MERGE，会将引用视图的语句的文本与视图定义合并起来，使得视图定义的某一部分取代语句的对应部分。
TEMPTABLE，视图的结果将被置于临时表中，然后使用它执行语句。
UNDEFINED，MySQL将选择所要使用的算法。如果可能，它倾向于MERGE而不是TEMPTABLE，这是因为MERGE通常更有效，而且如果使用了临时表，视图是不可更新的。

以下类型的试图是不可更新的：
（1）聚合函数、DISTINCT、GROUP BY、HAVING、UNION或UNION ALL
（2）常量视图
（3）JOIN
（4）FORM 一个不能更新的视图
（5）WHERE 的子查询引用了FROM字句中的表

删除视图：
drop view if exists 视图名;

=======================存储过程

create | alter [definer ={ user | current_user}]
procedure 存储名称 [{in | out | inout} 参数名,...]
[characteristic]
begin
	SQL语句;
end

characteristic：
COMMENT '描述'
LANGUAGE SQL		//说明存储|函数是SQL编写的（系统默认）
[NOT] DETERMINISTIC	//每次输入一样输出也一样的程序，默认not
{ CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATE}	//CONTAINS表示不包含读或写数据的语句（默认），NOSQL表示不包含SQL语句，READSSQL DATA表示包含读数据的语句，MODIFIES SQL DATA表示包含写数据的语句。
SQL SECURITY { DEFINER | INVOKER}					//表示用创建子程序者的许可调用或使用调用者的许可调用

=======================函数过程

create | alter [definer ={ user | current_user}]
procedure 存储名称 [{in | out | inout} 参数名,...]
return 类型
[characteristic]
begin
	SQL语句;
end


调用：CALL 函数名(参数,...)
删除：drop {procedure | function} [if exists] 名字
查看状态： show {procedure | function} status [like '名字']
查看创建语句： show create {procedure | function} 名字
查看信息：select * from routines where ROUTINE_NAME='名字'

=======================变量的使用
declare 变量名[,...] 类型 [default 值]
set 变量名=值或表达式,...
set 查询结果 into 变量名,...

=======================条件定义和处理
条件定义：
declare 条件名 condition for 错误码或SQLSTATE 状态值

条件处理：
declare CONTINE|EXIT|UNDO handler for 条件名|错误码|SQLSTATE 状态码|SQLWARNING|NOT FOUND|SQLEXCEPTION sql语句
SQLWARNING是所有01开头的SQLSTATE代码速记;
NOT FOUND是所有02开头的SQLSTATE代码速记;
SQLEXCEPTION是上面两个以外的SQLSTATE代码速记。

=======================游标
1、游标的定义
DECLARE 光标名称 CURSOR FOR 查询语法

2、打开游标
OPEN 光标名称

3、取游标中的数据
FETCH 光标名称 INTO var_name [，var_name ].....

4、关闭游标
close 光标名称

5、释放游标
DEALLOCATE 光标名称


=======================流程控制语句
if 条件 then 执行;
[elseif 条件 then 执行;...]
[else 执行;]
end if

case 变量
	when 值 then 执行;...
	[else 执行;]
end case

case 
	when 条件 then 执行;...
	[else 执行;]
end case

[label:] loop
	执行;
	leave [label];
	iterate [label];	//相当与continue
end loop [label]

[label:] while 条件 do
	SQL语句
end while [label]

=======================实践调度器
 
create event 事件名 on schedule 时间
do
	执行;
	
	
时间：
 (1)at 起始时间 + interval 1 hour	//current_timestamp当前时间
 (2)every 5 second			//每5秒
 
show events;				//查看调度器
show variables like '%scheduler%';	//查看关闭状态
set global event_scheduler=1;		//打开调度器
alter event 事件名 disable;		//禁用调度器‘drop event 事件名;			//删除调度器	

=======================触发器

create trigger 名字
after | before
insert | update | delete
on 表名 for each row 
begin
	执行;
end

show triggers;				//查看所有触发器信息
desc triggers;				//列出所有触发器名字
select * from triggers where trigger_name='触发器名字';	//查看某个触发器具体信息
drop trigger 触发器名字;		//删除触发器

触发程序不能调用将数据返回给客户端的存储程序;
不能使用触发器中使用显式或隐式开始或结束的语句，如start transaction,commit或rollback。


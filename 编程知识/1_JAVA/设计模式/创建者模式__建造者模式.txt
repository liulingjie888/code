
建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。
一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。

优点： 1、建造者独立，易扩展。 2、便于控制细节风险。
缺点： 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。

=====步骤 1
创建一个表示食物条目和食物包装的接口。

public interface Item {
   public String name();					//返回单个商品名字
   public Packing packing();					//打包方式
   public float price();    					//价格
}

public interface Packing {
   public String pack();
}

=====步骤 2
创建实现 Packing 接口的实体类。

public class Wrapper implements Packing {			//实现碗
 
   @Override
   public String pack() {
      return "Wrapper";
   }
}

public class Bottle implements Packing {			//实现杯子
 
   @Override
   public String pack() {
      return "Bottle";
   }
}

=====步骤 3
创建实现 Item 接口的抽象类，该类提供了默认的功能。

Burger.java
public abstract class Burger implements Item {		//实现汉堡类
 
   @Override
   public Packing packing() {
      return new Wrapper();
   }
 
   @Override
   public abstract float price();
}

public abstract class ColdDrink implements Item {		//实现冷饮类
 
    @Override
    public Packing packing() {
       return new Bottle();
    }
 
    @Override
    public abstract float price();
}

=====步骤 4
创建扩展了 Burger 和 ColdDrink 的实体类。

public class VegBurger extends Burger {			//实现蔬菜汉堡类
 
   @Override
   public float price() {
      return 25.0f;
   }
 
   @Override
   public String name() {
      return "Veg Burger";
   }
}

public class ChickenBurger extends Burger {			//实现鸡肉汉堡类
 
   @Override
   public float price() {
      return 50.5f;
   }
 
   @Override
   public String name() {
      return "Chicken Burger";
   }
}

public class Coke extends ColdDrink {				//实现可口可乐类
 
   @Override
   public float price() {
      return 30.0f;
   }
 
   @Override
   public String name() {
      return "Coke";
   }
}

public class Pepsi extends ColdDrink {			//实现百事可乐类
 
   @Override
   public float price() {
      return 35.0f;
   }
 
   @Override
   public String name() {
      return "Pepsi";
   }
}

=====步骤 5
创建一个 Meal 类，带有上面定义的 Item 对象。
 
public class Meal {
   private List<Item> items = new ArrayList<Item>(); 	//套餐类，由多个商品组成   
 
   public void addItem(Item item){
      items.add(item);
   }
 
   public float getCost(){			//总价
      float cost = 0.0f;
      for (Item item : items) {
         cost += item.price();
      }        
      return cost;
   }
 
   public void showItems(){			//展示
      for (Item item : items) {
         System.out.print("Item : "+item.name());
         System.out.print(", Packing : "+item.packing().pack());
         System.out.println(", Price : "+item.price());
      }        
   }    
}

=====步骤 6
创建一个 MealBuilder 类，实际的 builder 类负责创建 Meal 对象。

public class MealBuilder {			//实现具体套餐类
 
   public Meal prepareVegMeal (){		//蔬菜可口可乐套餐	
      Meal meal = new Meal();
      meal.addItem(new VegBurger());
      meal.addItem(new Coke());
      return meal;
   }   
 
   public Meal prepareNonVegMeal (){		//肌肉百事可乐套餐
      Meal meal = new Meal();
      meal.addItem(new ChickenBurger());
      meal.addItem(new Pepsi());
      return meal;
   }
}
步骤 7
BuiderPatternDemo 使用 MealBuider 来演示建造者模式（Builder Pattern）。

public class BuilderPatternDemo {
   public static void main(String[] args) {
      MealBuilder mealBuilder = new MealBuilder();
 
      Meal vegMeal = mealBuilder.prepareVegMeal();
      System.out.println("Veg Meal");
      vegMeal.showItems();
      System.out.println("Total Cost: " +vegMeal.getCost());
 
      Meal nonVegMeal = mealBuilder.prepareNonVegMeal();
      System.out.println("\n\nNon-Veg Meal");
      nonVegMeal.showItems();
      System.out.println("Total Cost: " +nonVegMeal.getCost());
   }
}
步骤 8
执行程序，输出结果：

Veg Meal
Item : Veg Burger, Packing : Wrapper, Price : 25.0
Item : Coke, Packing : Bottle, Price : 30.0
Total Cost: 55.0


Non-Veg Meal
Item : Chicken Burger, Packing : Wrapper, Price : 50.5
Item : Pepsi, Packing : Bottle, Price : 35.0
Total Cost: 85.5

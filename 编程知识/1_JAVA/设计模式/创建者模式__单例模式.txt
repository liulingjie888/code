简单点说，就是一个应用程序中，某个类的实例对象只有一个，你没有办法去new，因为构造器是被private修饰的，一般通过getInstance()的方法来获取它们的实例。

优点：
1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。
2、避免对资源的多重占用（比如写文件操作）。
缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。

（1）懒汉式写法（线程安全，调用的时候创建）
public class Singleton {  
   private static Singleton instance;  
   private Singleton (){}  
   
   public static synchronized Singleton getInstance() {  
	   if (instance == null) {  
	       instance = new Singleton();  
	   }  
	   return instance; 
   }  
   
}
优点：第一次调用才初始化，避免内存浪费。
缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。

（2）饿汉式写法（初始化的时候创建）
public class Singleton {  
   private static Singleton instance = new Singleton();  
   private Singleton (){}  
   
   public static Singleton getInstance() {  
   	return instance;  
   }
}
优点：没有加锁，执行效率会提高。
缺点：类加载时就初始化，浪费内存。

（3）静态内部类
public class Singleton {  

   private static class SingletonHolder {  
   	private static final Singleton INSTANCE = new Singleton();  
   }  
   
   private Singleton (){}
     
   public static final Singleton getInstance() {  
   	return SingletonHolder.INSTANCE;  
   }  
}
这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。

（4）枚举
public enum Singleton {  
   INSTANCE;  
   public void whateverMethod() {  
   }  
}

这种方式是Effective Java作者Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象，可谓是很坚强的壁垒啊，不过，个人认为由于1.5中才加入enum特性，用这种方式写不免让人感觉生疏。

（5）双检锁/双重校验锁（DCL，即 double-checked locking）
描述：这种方式采用双锁机制，安全且在多线程情况下能保持高性能。getInstance() 的性能对应用程序很关键。

实例
public class Singleton {  
    private volatile static Singleton singleton;  
    private Singleton (){}  
    
    public static Singleton getSingleton() {  
	    if (singleton == null) {  
		synchronized (Singleton.class) {  
			if (singleton == null) {  
			    singleton = new Singleton();  
			}  
		}  
	    }  
	    return singleton;  
    }  
}

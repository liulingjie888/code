--------------------@Target
@Target 表示这个注解能放在什么位置上
如@Target({METHOD,TYPE})，表示他可以用在方法和类型上（类和接口），但是不能放在属性等其他位置。 可以选择的位置列表如下：

ElementType.TYPE：能修饰类、接口或枚举类型
ElementType.FIELD：能修饰成员变量
ElementType.METHOD：能修饰方法
ElementType.PARAMETER：能修饰参数
ElementType.CONSTRUCTOR：能修饰构造器
ElementType.LOCAL_VARIABLE：能修饰局部变量
ElementType.ANNOTATION_TYPE：能修饰注解
ElementType.PACKAGE：能修饰包

--------------------@Retention
表示生命周期。例：
@Retention(RetentionPolicy.RUNTIME)

RetentionPolicy.SOURCE： 注解只在源代码中存在，编译成class之后，就没了。@Override 就是这种注解。
RetentionPolicy.CLASS： 注解在java文件编程成.class文件后，依然存在，但是运行起来后就没了。@Retention的默认值，即当没有显式指定@Retention的时候，就会是这种类型。
RetentionPolicy.RUNTIME： 注解在运行起来之后依然存在，程序可以通过反射获取这些信息。

-------------------Inherited
@Inherited 表示该注解具有继承性。

------------------@Documented
在用javadoc命令生成API文档后，文档里会出现该注解说明。

注： 使用eclipse把项目中的.java文件导成API文档步骤：
1. 选中项目
2. 点开菜单File
3. 点击Export
4. 点开java->javadoc->点next
5. 点finish

-----------------@Repeatable (java1.8 新增)
表示在可以多次使用这个注释，例：
    @Target(  METHOD )
    @Retention( RetentionPolicy.RUNTIME )
    @Repeatable( FileTypes.class )
    public @interface FileType {
        String value();
    }
 
    @FileType( ".java" )
    @FileType( ".html" )
    @FileType( ".css" )
    public void work(){
            FileType[] fileTypes= this.getClass().getMethod("work").getAnnotationsByType(FileType.class);
    }

---------------
使用Lock对象实现同步效果

Lock是一个接口，为了使用一个Lock对象，需要用到
Lock lock = new ReentrantLock();
 
与 synchronized (someObject) 类似的，lock()方法，表示当前线程占用lock对象，一旦占用，其他线程就不能占用了。
与 synchronized 不同的是，一旦synchronized 块结束，就会自动释放对someObject的占用。 lock却必须调用unlock方法进行手动释放，为了保证释放的执行，往往会把unlock() 放在finally中进行

import java.util.concurrent.locks.Lock;		//接口
import java.util.concurrent.locks.ReentrantLock;	//对象类

Thread t1 = new Thread() {
            Lock lock = new ReentrantLock();
            public void run() {
                try {
                    lock.lock();	//占用对象
                    执行代码……
 
                } catch (InterruptedException e) {
                    e.printStackTrace();
                } finally {
                    lock.unlock();	//释放对象
                }
                log("线程结束");
            }
        };

、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、

synchronized 是不占用到手不罢休的，会一直试图占用下去。
与 synchronized 的钻牛角尖不一样，Lock接口还提供了一个trylock方法。
trylock会在指定时间范围内试图占用，占成功了，就啪啪啪。 如果时间到了，还占用不成功，扭头就走~

注意： 因为使用trylock有可能成功，有可能失败，所以后面unlock释放锁的时候，需要判断是否占用成功了，如果没占用成功也unlock,就会抛出异常
	
            Lock lock = new ReentrantLock();
            Thread t1 = new Thread() {
            public void run() {
                boolean locked = false;
                try {

                    locked = lock.tryLock(1,TimeUnit.SECONDS);
                    if(locked){		
                       执行代码……
                    }
                    else{
                        log("经过1秒钟的努力，还没有占有对象，放弃占有");
                    }
 
                } catch (InterruptedException e) {
                    e.printStackTrace();
                } finally {
                    if(locked){		//如果锁住了释放
                        lock.unlock();
                    }
                }
                log("线程结束");
            }

、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、

使用synchronized方式进行线程交互，用到的是同步对象的wait,notify和notifyAll方法

Lock也提供了类似的解决办法，首先通过lock对象得到一个Condition对象，然后分别调用这个Condition对象的：await, signal,signalAll 方法

注意： 不是Condition对象的wait,nofity,notifyAll方法,是await,signal,signalAll
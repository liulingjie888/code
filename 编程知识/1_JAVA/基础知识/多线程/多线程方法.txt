通过继承Thread类实现多线程
方法

.setName("线程名字");	//设置线程名
.getName()		//获取线程名
.start()	//创建一个线程
.run()	//运行的内容
.sleep(1000）	//休眠1秒
.isAlive()	//是否在运行
Tread.currentThread().getName()   获取当前线程名称
Thread.yield();	//临时暂停，使得其他线程可以占用CPU资源
this.wait();	 //进入等待，减少CPU占用	
this.notify();	//唤醒等待的线程


守护线程：
Thread.setDaemon(true);	//设为守护线程，要在激活线程之前
当JVM中只剩下守护线程时，JVM会自动退出


线程的联合（加入）：
Thread.join()	//先激活，后加入（会出现InterruptedException异常）


线程优先级：
当线程处于竞争关系的时候，优先级高的线程会有更大的几率获得CPU资源 
为了演示该效果，要把暂停时间去掉，多条线程各自会尽力去占有CPU资源 
同时把英雄的血量增加100倍，攻击减低到1，才有足够的时间观察到优先级的演示 
如图可见，线程1的优先级是MAX_PRIORITY，所以它争取到了更多的CPU资源执行代码

t1.setPriority(Thread.MAX_PRIORITY);
t2.setPriority(Thread.MIN_PRIORITY);



Thread类其实也是继承了Runnable接口的一个类
通过继承Runnable接口实现多线程
new Thread(继承Runnable接口的类,[线程名称]).start()	//线程启动




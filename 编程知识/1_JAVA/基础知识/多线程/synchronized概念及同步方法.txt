synchronized 同步对象概念：

解决脏数据问题之前，先理解
synchronized关键字的意义
如下代码：
 
Object someObject =new Object();
synchronized (someObject){
  //此处的代码只有占有了someObject后才可以执行
}

synchronized表示当前线程，独占 对象 someObject
当前线程独占 了对象someObject，如果有其他线程试图占有对象someObject，就会等待，直到当前线程释放对someObject的占用。
someObject 又叫同步对象，所有的对象，都可以作为同步对象
为了达到同步的效果，必须使用同一个同步对象

释放同步对象的方式： synchronized 块自然结束，或者有异常抛出

、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、

同步的方法：
一、使用hero对象作为同步对象：
既然任意对象都可以用来作为同步对象，而所有的线程访问的都是同一个hero对象，索性就使用gareen来作为同步对象
进一步的，对于Hero的hurt方法，加上：
synchronized (this) {
}
表示当前对象为同步对象，即也是gareen为同步对象


                    synchronized (gareen) {		//使用gareen作为synchronized
                        gareen.recover();
                    }
二、类中声明：
public void hurt(){
        //使用this作为同步对象
        synchronized (this) {
            hp=hp-1;   
        }
}
三、方法声明：
public synchronized void recover(){
        hp=hp+1;
}

、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、

如果一个类，其方法都是有synchronized修饰的，那么该类就叫做线程安全的类

同一时间，只有一个线程能够进入 这种类的一个实例 的去修改数据，进而保证了这个实例中的数据的安全(不会同时被多线程修改而变成脏数据)

所以当进行大量字符串拼接操作的时候，如果是单线程就用StringBuilder会更快些，如果是多线程，就需要用StringBuffer保证数据的安全性。非线程安全的为什么会比线程安全的快？ 因为不需要同步嘛，省略了些时间

	线程安全的类		非线程安全的类
	StringBuffer		StringBuilder
	Hashtable			LinkedList
	Vector			ArrayList
				HashSet
				HashMap
				
、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、、
Collections.synchronizedList(对应类);
非线程安全的类通过工具类Collections转换为线程安全的类：
        List<Integer> list1 = new ArrayList<>();
        List<Integer> list2 = Collections.synchronizedList(list1);
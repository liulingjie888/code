"."		任意字符
"\\d"		0-9
"\\D"		任意一个非数字
"\\s"		空格类字符，如\n \t\
"\\S"		非空格类字符
"\\w"		标识符类字符
"\\W"		非标识符类字符
\\p{Lower}	小写字母[a-z]
\\p{Upper}	大写字母[A-Z]
\\p{ASCII}		ASCII字符
\\p{Alpha}	字母
\\p{Digit}		数字字符
\\p{Alnum}	字母或数字
\\p{Punct}	标点符号
\\p{Blank}		空格或制表符
不懂
\\p{Cntrl}		控制字符
\\p{Graph}	可视字符
\\p{Print}		打印字符

[^abc}		除a,b,c以外字符
[a-d[m-p]]	并：a到d和m到p的字符
[a-z&&[^abc]]	交：除a,b,c以外的小写字母

X?	X出现1次或0次
X+	至少出现1次
X*	出现0次及以上
X{n}	正好出现n次
X{n,}	至少出现n次
X{n,m}	出现n到m次

函数：
字符串.matches(正则表达式)		返回boolean,判断该字符串是否符合该正则表达式
字符串.split(分隔符或正则表达式)	返回拆分后的数组

类
import java.util.regex.Matcher;
import java.util.regex.Pattern;
普通方法：
1.
String telRegex = "[1][345789]\\d{9}";
字符串.matches(telRegex));	//匹配返回true
2.
Pattern p=Pattern.compile("正则表达式"); 
Matcher m=p.matcher("字符串"); 
m.matches();	//匹配字符串全部是否符合正则表达式，返回boolean
m.lookingAt();	//匹配字符串前面是否符合正则表达式，返回boolean
m.find();		//匹配字符串中任一位置是否符合正则表达式，返回boolean
		//如果出现多个符合正则表达式的子字符串，每调用一次该函数则向下一个符合的子字符串移动,例：
		while (m.find()) {
                    		pw.println(m.group());
               		}

m.start()		//返回匹配到的子字符串的第一个字符在字符串中的下标位置. 
m.end()		//返回匹配到的子字符串的最后一个字符在字符串中的下标位置+1. 
m.group()	//返回匹配到的子字符串 

静态方法：
Pattern.matches("正则表达式","字符串");		//匹配字符串是否符合正则表达式，返回boolean

其他方法：
String  p.pattern();		//返回该对象的正则表达式
String[]  p.splite(字符串);	//返回以正则表达式为分隔符分割的字符串数组
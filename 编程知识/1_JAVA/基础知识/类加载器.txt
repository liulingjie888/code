public class MyClassLoader extends ClassLoader{

    private String classpath;
    
    public MyClassLoader(String classpath) {
        this.classpath = classpath;						//类的文件路径
    }

    @Override
    protected Class<?> findClass(String name) throws ClassNotFoundException {
        try {
            byte [] classDate=getDate(name);					//获取类文件的字节流
            
            if(classDate!=null){
                return defineClass(name,classDate,0,classDate.length);	//defineClass方法将字节码转化为类
            }
            
        } catch (IOException e) {
            
            e.printStackTrace();
        }
        
        return super.findClass(name);
    }
    
    public static void main(String []args) throws Throwable{
        
        MyClassLoader myClassLoader=new MyClassLoader("/user/lib");	//自定义类加载器的加载路径
      
        Class c=myClassLoader.loadClass("com.test.Test");		//从字节码流中加载出类返回
        
        if(c!=null){
            Object obj=c.newInstance();				//根据类创建对象
            Method method=c.getMethod("say", null);			//获取其方法并调用
            method.invoke(obj, null);
            System.out.println(c.getClassLoader().toString());
        }
    }
    
    
    //返回类的字节码流
    private byte[] getDate(String className) throws IOException{
        InputStream in = null;
        ByteArrayOutputStream out = null;
        String path=classpath + File.separatorChar +
                    className.replace('.',File.separatorChar)+".class";
        try {
            in=new FileInputStream(path);
            out=new ByteArrayOutputStream();
            byte[] buffer=new byte[2048];
            int len=0;
            while((len=in.read(buffer))!=-1){
                out.write(buffer,0,len);
            }
            return out.toByteArray();
        } 
        catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        finally{
            in.close();
            out.close();
        }
        return null;
    }
    
    
}

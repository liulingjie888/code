//配置文件放在src文件夹下
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE struts PUBLIC
	"-//Apache Software Foundation//DTD Struts Configuration2.5//EN"
	"http://struts.apache.org/dtds/struts-2.5.dtd">

<struts>
	<package name="default" extends="struts-default">
		<action name="login" class="org.action.LoginAction">
			<result name="success">main.jsp</result>
			<result name="error">error.jsp</result>
		</action>
	</package>
</struts>

---------------------------struts下的子标签
（1）<include file="/包名/xs.xml"/>	//表示将其他struts配置信息包含进来

（2）//定义常量属性
<constant name="struts.devMode" value="true"/>	//设置开发模式
<constant name="struts.il8n.encoding" value="utf-8"/>	//设置编码格式

（3）<bean>

（4）<package>:
	*属性
		*namespace="/自定义"	//表示空间名，默认空间名""，根空间名"/",若指定了空间名，则表单action请求要加上空间名，如user/login.action ; login.action表示根空间名下
		*name		//用于其他package引用
		*extends		//继承其他包，默认会继承struts-default包
		*abstract		//抽象表，不能包含action
	
	*<action>标签说明:
		*name:必须，用于表单指定处理的action属性
		*class:指定处理类的全包名
		*method:指定由类中的哪个方法处理
		*converter:指定Action使用的类型转换器
		*  <result name="Action处理返回值" type="处理类型">
			<param name="参数名">参数值<param>
		   </result>
		   处理类型:
			dispatcher(默认值):  表示服务器跳转请求，配置该类型后，result可以指定location属性（跳转地址）和parse属性（是否在location参数中使用表达式）
			redirect:  表示重定向
			redirectAction:  表示重定向一个新的action
				<result name="actionName" type="redirectAction">
					<param name="actionNmae">重定向action的name</param>
					<param name="namespace">/自定义<param>	//表示跳转到指定namespace的package下的action
				</result>
			chain:
				跳转到其他action
		*通配符：
	    		<action name="*" class="org.action.LoginAction" method="{1}"></action>
	    		当表单指定的action为login.action时，则{1}会替换成login。

	*<form action="action的name名!actiong的执行方法名.action" method=""></form>	//在form中指定action类的执行方法

	*<default-class-ref class="org.action.LoginAction"/>	//使用默认类:  action个未定义class属性时默认为该类

	*<global-results>					//全局结果： 在指定action中找不到处理结果则会找全局结果处理
		<result name="error">error.jsp</result>
	</global-results>

	*<default-action-ref>	//默认action
	*<default-interceptor-ref>	//默认拦截器
	*<global-exception-mappings>
		 <exception-mapping result="逻辑视图" exception="异常类型"/>	//发生异常时对应的视图信息，也可定义在action标签中
	 </global-exception-mappings>
	*<interceptors>		//配置拦截器
、	*<result-types>		//配置结果类型



================基础命令
service docker restart			//重启服务
docker run -it ubuntu /bin/bash		//启动并进入容器
docker stop 容器ID|NAME			//停止容器
docker start 容器ID 			//启动已停止的容器
docker restart 容器ID			//重启容器
docker attach 容器ID			//进入后台运行的容器（exit推出后容器会停止） 
docker exec 容器ID			//进入后台运行的容器（exit推出后容器不会停止）
docker exec -it 容器 /bin/sh		//在运行的容器中执行命令
docker rm -f 容器ID			//强制删除容器
docker container prune		//清理掉所有处于终止状态的容器 
docker kill -s KILL 容器		//杀掉运行中的容器
docker pause 容器			//暂停数据库容器db01提供服务
docker unpause 容器			//恢复数据库容器db01提供服务
docker create --name 名字 镜像    	//创建一个容器不启动它
docker wait 容器			//阻塞运行直到容器停止，然后打印出它的退出代码
docker cp /abc 容器ID:/www/		//将主机/abc目录拷贝到容器的/www目录下
docker cp /abc 容器ID:/www		//将主机/abc目录拷贝到容器中，并重命名为www
docker commit -m="描述" -a="作者名" 容器ID 镜像名:版本号	//将容器制作成镜像

================快照命令
docker export -o tar文件 容器ID
docker export 容器ID > 文件名.tar		//导出容器快照
docker import tar文件 自定义容器名		//将tar容器快照导入，在start启动

cat 快照文件 | docker import - 镜像名:版本号	//将快照文件导入到镜像～	
docker import URL				//通过指定 URL或者某个目录来导入

================查看命令
docker info				//显示 Docker 系统信息，包括镜像和容器数
docker version				//显示 Docker 版本信息
docker ps				//查看运行的容器
docker ps -l 				//查询最后一次创建的容器
docker logs -f 容器ID 			//查看容器内的标准输出
docker port 容器ID			//查看容器端口映射关系
docker top 容器ID			//查看容器内部运行的进程
docker inspect 容器ID			//查看 Docker 的底层信息
 docker diff 容器ID			//检查容器里文件结构的更改。

docker					//显示所有命令选项
docker 命令 --help 			//更深入的了解指定的 Docker 命令使用方法。

================在容器内运行一个应用程序
#Docker 首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。
#ubuntu:15.10 指定要运行的镜像
#/bin/echo "Hello world": 在启动的容器里执行的命令
docker run ubuntu:15.10 /bin/echo "Hello world"

===============进入容器操作
docker run -it ubuntu:15.10 /bin/bash

=============docker run
#-p 外部端口号:容器端口号	#设置指定映射的端口
 -p 127.0.0.1:5001:5000 	#绑定网络地址
 -p 127.0.0.1:5000:5000/udp	#绑定UDP端口(默认绑定tcp端口)
#-d:后台运行容器，并返回容器ID
#-P:将容器内部使用的网络端口映射到我们使用的主机上。
#-t: 在新容器内指定一个伪终端或终端。
#-i: 允许你对容器内的标准输入 (STDIN) 进行交互
#--name 名字：给容器取名字
#--network 网络名：运行时连接到网络
#--ip 172.17.0.2：指定ip
#--dns=114.114.114.114：制定DNS的地址
#--dns-search=test.com：指定容器DNS搜索域名，默认和宿主一致。当设定搜索域为 .example.com 时，在搜索一个名为host的主机时，DNS 不仅搜索 host，还会搜索 host.example.com。
#-h 主机名 | --hostname=主机名：设定容器的主机名，它会被写到容器内的 /etc/hostname 和 /etc/hosts
#-v ：修改挂载点
#-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；
#-e username="ritchie": 设置环境变量；
#--env-file=[]: 从指定文件读入环境变量；
#--cpuset="0-2" or --cpuset="0,1,2": 绑定容器到指定CPU运行；
#-m :设置容器使用内存最大值；
#--net="bridge": 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；
#--link=[]: 添加链接到另一个容器；
#--expose=[]: 开放一个端口或一组端口；
#--volume , -v: 绑定一个卷

==============启动容器（后台模式）
#使用以下命令创建一个以进程方式运行的容器，执行后会输出它的ID
docker run -d ubuntu:15.10 /bin/sh -c "while true; do echo hello world; sleep 1; done"
docker run -itd --name ubuntu-test ubuntu /bin/bash

=============Docker 网络
=====创建网络
#-d：参数指定 Docker 网络类型，有 bridge、overlay（overlay 网络类型用于 Swarm mode）
docker network create -d bridge 网络名字

=====配置DNS
如果在容器启动时没有指定 --dns 和 --dns-search，Docker 会默认用宿主主机上的 /etc/resolv.conf 来配置容器的 DNS。
在宿主机的 /etc/docker/daemon.json 文件中增加以下内容来设置全部容器的 DNS：
{
  "dns" : [
    "114.114.114.114",
    "8.8.8.8"
  ]
}
配置完，需要重启 docker 才能生效。
docker run -it --rm ubuntu  cat etc/resolv.conf查看容器DNS信息

=============docker rm
移除容器 nginx01 对容器 db01 的连接，连接名 db：
docker rm -l db 

删除容器 nginx01, 并删除容器挂载的数据卷：
docker rm -v nginx01

删除所有已经停止的容器：
docker rm $(docker ps -a -q)


==================docker ps
-a :显示所有的容器，包括未运行的。
-f :根据条件过滤显示的内容。
--format :指定返回值的模板文件。
-l :显示最近创建的容器。
-n :列出最近创建的n个容器。
--no-trunc :不截断输出。
-q :静默模式，只显示容器编号。
-s :显示总的文件大小。


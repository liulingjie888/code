
命令：
docker network ls		//列出网络
docker network rm 网络名	//删除网络
docker network inspect 网络名	//查看信息
docker network create	


docker network connect 网络名 容器名		//将容器加入指定网络
docker network disconnect 网络名 容器名	//将容器退出指定网络


====================模式
docker run创建Docker容器时，可以用–net选项指定容器的网络模式，Docker有以下5种网络模式：
bridge模式：使用–net =bridge指定，默认设置；
host模式：使用–net =host指定；
none模式：使用–net =none指定；
container模式：使用–net =container:指定容器名；
overlay模式：使用–net=overlay

=====================bridge模式网络
在该模式（见下图）中，Docker守护进程创建了一个虚拟以太网桥docker0，附加在其上的任何网卡之间都能自动转发数据包。默认情况下，守护进程会创建一对对等接口，将其中一个接口设置为容器的eth0接口，另一个接口放置在宿主机的命名空间中，从而将宿主机上的所有容器都连接到这个内部网络上。同时，守护进程还会从网桥的私有地址空间中分配一个IP地址和子网给该容器。IP数据包就不能从宿主机之外路由到容器中

×容器内可以访问其他地方
×宿主机可以访问到容器内
×宿主机之外ip不能访问容器内

=====================host模式网络

该模式将禁用Docker容器的网络隔离。因为容器共享了宿主机的网络命名空间，直接暴露在公共网络中。因此，你需要通过端口映射（port mapping）来进行协调。
当使用host模式网络时，容器实际上继承了宿主机的IP地址。该模式比bridge模式更快（因为没有路由开销），但是它将容器直接暴露在公共网络中，是有安全隐患的。

====================container模式

先会有一个容器使用的是nat模式，相当于这有一个ip会连接到docker0上，然后通过宿主机的eth1转发出去。nat模式直接使用的是宿主机的模式，container 启动一个容器，会使用另外一个容器的网络，它们会共享空间，新的容器，它们的网络容器是一模一样的，那么这个容器，是通过host容器出去的。

====================none模式
none 模式就是container 没有任何的网络，不给它创建网络，我们可以自己去实现自己想要的网络模式。

====================overlay 网络模式、


=================虚拟机设置网络：
#设置网络为NAT（10.0.2.0/24），则虚拟机可以访问宿主机，反之不行;虚拟机可以访问虚拟机
#设置网络为一个Host（192.168.56.1/24）,启用DHCP服务器，则可以将虚拟机和宿主机分配到一个网络;当时宿主机以外的无法访问到该网络

=================docker：
======Docker守护进程创建了一个虚拟以太网桥docker0
新建的容器会自动桥接到这个docker0接口（该接口为eth0，172.17.0.2，可以ping 172.17.0.1）

新建的machine会自动桥接到这个docker0接口（该接口为docker0,而且所有的machine都相同172.17.0.1,只有swarm的管理节点可以ping 172.17.0.2，其他machine不行）

容器和machine都可以ping到docker_gwbridge（172.18.0.1），很奇怪明明不再一个网段。

======当我们初始化一个swarm或是加入到一个swarm中时，在docker主机上会出现两种网络：

1、称为ingress的overlay网络，用于传递集群服务的控制或是数据消息，若在创建swarm服务时没有指定连接用户自定义的overlay网络，将会加入到默认的ingress网络

2、machine组成的swarm会自动桥接到名为docker_gwbridge的桥接网络(而且所有的machine都相同172.18.0.1)


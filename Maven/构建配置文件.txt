
项目级（Per Project） 	定义在项目的POM文件pom.xml中
用户级 （Per User） 	定义在Maven的设置xml文件中 (%USER_HOME%/.m2/settings.xml)
全局（Global） 	定义在 Maven 全局的设置 xml 文件中 (%M2_HOME%/conf/settings.xml)

其中在src/main/resources文件夹下有个用于测试文件：
env.properties 	如果未指定配置文件时默认使用的配置。

我们将 maven-antrun-plugin:run 目标添加到测试阶段中。这样我们可以在不同的 profile 中输出文本信息。我们将使用 pom.xml 来定义不同的 profile，并在命令控制台中使用 maven 命令激活 profile。

pom.xml 文件如下：
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  ......
  <profiles>
      <profile>
          <id>test</id>					//ID
          <build>
              <plugins>
                 <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <version>1.8</version>
                    <executions>
                       <execution>
                          <phase>test</phase>		//阶段
                          <goals>
                             <goal>run</goal>
                          </goals>
                          <configuration>
                          <tasks>			//执行的操作
                             <echo>Using env.test.properties</echo>
                             <copy file="src/main/resources/env.test.properties" tofile="${project.build.outputDirectory}/env.properties" overwrite="true"/>
                          </tasks>
                          </configuration>
                       </execution>
                    </executions>
                 </plugin>
              </plugins>
          </build>
      </profile>
      ......
   </profiles>
</project>

==============================1执行命令激活配置文件
mvn test -Ptest		//前面的test为阶段，后面的为profile的ID

==============================2Maven设置激活配置文件

打开 %USER_HOME%/.m2 目录下的 settings.xml 文件，其中 %USER_HOME% 代表用户主目录。如果 setting.xml 文件不存在就直接拷贝 %M2_HOME%/conf/settings.xml 到 .m2 目录，其中 %M2_HOME% 代表 Maven 的安装目录。
配置 setting.xml 文件，增加 <activeProfiles>属性：
<settings xmlns="http://maven.apache.org/POM/4.0.0"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
   http://maven.apache.org/xsd/settings-1.0.0.xsd">
   ...
   <activeProfiles>
      <activeProfile>test</activeProfile>	//test为profile的id
   </activeProfiles>
</settings>

执行命令：
mvn test
此时不需要使用 -Ptest 来输入参数了，上面的 setting.xml 文件的 <activeprofile> 已经指定了test参数代替了。

==============================3环境变量激活配置文件 
在1中的profile的id元素后加入下面节点：
<activation>
    <property>
       <name>env</name>
       <value>test</value>
    </property>
</activation>

执行命令：
mvn test -Denv=test

提示 1：上面使用 -D 传递环境变量，其中 evn 对应刚才设置的 <name> 值，test 对应<value>。
提示 2：在 Windows 10 上测试了系统的环境变量，但是不生效，所以，只能通过 -D 传递

==============================4操作系统激活配置文件
activation 元素包含下面的操作系统信息。当系统为 windows XP 时，test Profile 将会被触发。
<profile>
   <id>test</id>
   <activation>
      <os>
         <name>Windows XP</name>
         <family>Windows</family>
         <arch>x86</arch>
         <version>5.1.2600</version>
      </os>
   </activation>
</profile>

现在打开命令控制台，跳转到 pom.xml 所在目录，并执行下面的 mvn 命令。不要使用 -P 选项指定 Profile 的名称。Maven 将显示被激活的 test Profile 的结果。
mvn test

=============================5通过文件的存在或者缺失激活配置文件
现在使用 activation 元素包含下面的操作系统信息。当 target/generated-sources/axistools/wsdl2java/com/companyname/group 缺失时，test Profile 将会被触发。
<profile>
   <id>test</id>
   <activation>
      <file>
         <missing>target/generated-sources/axistools/wsdl2java/com/companyname/group</missing>
      </file>
   </activation>
</profile>

现在打开命令控制台，跳转到 pom.xml 所在目录，并执行下面的 mvn 命令。不要使用 -P 选项指定 Profile 的名称。Maven 将显示被激活的 test Profile 的结果。

mvn test





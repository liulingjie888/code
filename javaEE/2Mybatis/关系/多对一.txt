
========================Product类
public class Product {
    private int id;
    private String name;
    private float price;
    private Category category;
    ......
}

=======================1使用Product.xml
然后通过resultMap ，进行字段和属性的对应。
使用association 进行多对一关系关联，指定表字段名称与对象属性名称的一一对应关系
注： Category的id 字段 和Product的id字段同名，Mybatis不知道谁是谁的，所以需要通过取别名cid,pid来区分。

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.how2java.pojo">
<resultMap type="Product" id="productBean">
    <id column="pid" property="id" />
    <result column="pname" property="name" />
    <result column="price" property="price" />

    <!-- 多对一的关系 -->
    <!-- property: 指的是属性名称, javaType：指的是属性的类型 -->
    <association property="category" javaType="Category">
        <id column="cid" property="id"/>
        <result column="cname" property="name"/>
    </association>
</resultMap>

<!-- 根据id查询Product, 关联将Orders查询出来 -->
<select id="listProduct" resultMap="productBean">
    select c.*, p.*, c.id 'cid', p.id 'pid', c.name 'cname', p.name 'pname' from category_ c left join product_ p on c.id = p.cid
</select>   
</mapper>

===========操作代码

List<Product> ps = session.selectList("listProduct");
for (Product p : ps) {
    System.out.println(p+" 对应的分类是 \t "+ p.getCategory());
}

======================2使用注释

========新增CategoryMapper接口，提供get方法：

public interface CategoryMapper {
    @Select(" select * from category_ where id = #{id}")
    public Category get(int id);
     
}

=======新增ProductMapper接口，提供list方法：

public interface ProductMapper {
    @Select(" select * from product_ ")
    @Results({ 
        @Result(property="category",column="cid",one=@One(select="com.how2java.mapper.CategoryMapper.get")) 
    })
    public List<Product> list();
}

=======配置mybatis-config.xml：
 <mappers>
        <mapper resource="com/how2java/pojo/Category.xml"/>
        <mapper class="com.how2java.mapper.CategoryMapper"/> 
        <mapper class="com.how2java.mapper.ProductMapper"/> 
</mappers>

=======操作代码：
ProductMapper mapper = session.getMapper(ProductMapper.class);
 
List<Product> ps= mapper.list();
for (Product p : ps) {
    System.out.println(p + "\t对应的分类是:\t" + p.getCategory().getName());
}

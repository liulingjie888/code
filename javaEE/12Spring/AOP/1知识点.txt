1.横切关注点（Cross-cutting concern）
一个方法在一个应用程序中常被安排到各个处理流程之中，这些方法在AOP术语中称为横切关注点。

2.横切关注面（Aspect）
将散落在各个业务类中的横切关注点收集起来，设计为各个独立可重用的类，这种类成为横切关注面。

3.连接点（Join point）
连接点是程序中的一个点，主要有以下形式：
方法调用：
方法执行：
构造方法调用：
构造方法执行：
静态初始化部分执行：
对象预初始化：主要是指执行构造方法中的this即super
对象初始化：
属性引用：
属性设置：
异常执行：
通知执行：
连接点使用系统提供的关键字来表示，例如用call来表示方法调用连接点，execution表示方法执行连接点。连接点不能单独存在，需要与一定的上下文结合。

4.通知（Advice)
通知定义了切面中的实际实现，是指在定义好的切入点处所有执行的程序代码。
类型：
前置通知：在连接点之前执行通知中的代码
后置通知：在连接点之后执行通知中的代码。一般分为连接点正常返回通知和连接点异常返回通知等。
环绕通知：可以自由地改变程序的流程、连接点返回值等。除了可以自由添加需要的横切功能外，还需要负责主动调用连接点。

5.切入点（Pointcuts）
切入点是连接点的集合，它是程序中需要注入Advice的位置的集合，指明Advice要在什么条件被触发。

6.拦截器（Interceptor）
用来实现对连接点进行拦截，从而在连接点前后加入自定义的切面模块功能。在大多AOP框架中，基本上都是用拦截器来实现字段访问及方法调用的拦截。

7.目标对象（Target object）
位于拦截器链上最末端的对象实例，一般情况下就是实际业务对象。

8.AOP代理
是指在基于拦截器机制实现的AOP框架中，实际业务对象的代理对象。分为实现接口的代理（JDK动态代理），和不实现接口的动态代理（GGLib代理）


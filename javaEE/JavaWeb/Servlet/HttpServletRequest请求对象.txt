import javax.servlet.http.HttpServletRequest;
继承了javax.servlet.ServletRequest;

重写该对象可以继承HttpServletRequestWrapper类，如：
class MyServletRequest  extends HttpServletRequestWrapper{
	private HttpServletRequest request;
	public MyServletRequest(HttpServletRequest request){
		super(request);
		this.request=request;
	}
	. . . . . . 重写方法
}

------------------------------获取请求消息行信息方法----------------------------------
getMethod();		//获取请求方法
getRequestURI();		//获取端口号之后，信息参数前面的URI（/myWebProject/HelloWorldServlet）
getQueryString();		//获取URI“？”之后的信息参数
getProtocol();		//获取请求协议和版本，HTTP/1.1
getContextPath();		//获取URI中属于Web应用的路径，没有根目录“/”
getServletPath();		//获取Servlet的虚拟路径

getRemoteAddr();		//获取请求客户端的IP地址
getRemoteHost();		//获取请求客户端的完整主机名
getRemotePort();		//获取客户端的端口号

getLocalAddr();		//获取web服务器的IP地址
getLocalName();		//获取web服务器的完整主机名
getLocalPort();		//获取web服务器的端口号

getServerName();		//获取客户端请求的主机名
getServerPort();		//获取客户端请求的端口号（8080）
getScheme();		//获取客户端请求的协议（http，https，ftp）

StringBurrfer getRequestURL()	//获取客户端请求的完整URL

---------------------------------获取请求信息头方法----------------------------------------
getHeader("字段名");		//获取指定字段的值
int  getIntHeader("获取字段名");	//获取指定字段的值并转成整型，不存在则返回-1，无法转整型抛NumberFormatException异常
long  getDateHeader("字段名");	//获取指定字段的值并转成GTM格式常整型，自1970.1.1 0:0:0到现在的毫秒
Enumeration getHeaders("字段名");	//获取指定字段所有的值
Enumeration getHeaderNames();	//获取所有字段名

getContextType();		//获取Content-Type头字段的值
getContentLength();		//获取Content-Length字段的值
getCharacterEncoding();	//获取请求消息的编码类型，通常从Context-Type获取

----------------------------------获取请求参数方法-------------------------------------
getParameter("指定名称");		//获取指定名称的参数值
String[]  getParmeterValues("指定名称");	//获取指定名称所有的参数值，通常用于复选框
Enumeration  getParameterNames();	//获取所有名称
Map  getParameterMap()		//获取所有名称和相应值组成的Map集合

--------------------------------编码问题----------------------------------------
//通常服务端默认解码是采用的是"ISO-8859-1",所以要对Parameter获取的字符串重新"ISO-8859-1"编码，再用客户端的编码类型解码，例：name=new String(name.getBytes("iso8859-1"),"utf-8");
//也可以设置请求流的解码方式，但该方法只对POST方法有效;
request.setCharacterEncoding("utf-8");	

----------------------------------Request对象存储传递数据-----------------------------------
.setAttibute("名称",Object对象);	//设置值

.removeAttribute("名称");		//删除，等效于.setAttibute("名称",null);

Object  getAttribute("名称");		//获取指定对象或值
Enumeration getAttributeNmaes();	//获取所有属性名

----------------------------------------服务端请求发-----------------------------------
request.getRequestDispatcher("相对路径?name=value").forward(request, response);
相对目录必须以web应用根目录“/”开头
forward是服务器请求资源,服务器直接访问目标地址的Servlet并且当前后面代码不再执行,通过request传递信息，那个Servlet处理后负责响应浏览器，也可以是jsp文件
浏览器根本不知道服务器发送的内容从哪里来的,所以它的地址栏还是原来的地址.

request.getRequestDispatcher("相对路径?name=value").include(request, response);
与前面的不同，它会将本身的响应信息加上跳转的Servlet的响应消息一起发送给客户端，响应消息顺序以当前Servlet代码顺序，且以当前Servlet负责响应浏览器



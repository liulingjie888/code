maven依赖：
    <dependency>
      <groupId>org.quartz-scheduler</groupId>
      <artifactId>quartz</artifactId>
      <version>2.2.2</version>
    </dependency>

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <version>1.7.5</version>
    </dependency>

==========================TestQuartz

import org.quartz.JobDetail;
import org.quartz.Scheduler;
import org.quartz.Trigger;
import org.quartz.impl.StdSchedulerFactory;
import static org.quartz.JobBuilder.newJob;
import static org.quartz.SimpleScheduleBuilder.simpleSchedule;
import static org.quartz.TriggerBuilder.newTrigger;

public class TestQuartz {
    public static void main(String[] args) throws Exception{
        //创建调度器
        Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();

        //定义一个触发器
        Trigger trigger = newTrigger().withIdentity("trigger1", "group1") //定义名称和所属的组
                .startNow()				//现在开始执行，如果要指定时间则改为startAt(Date对象)
                .withSchedule(simpleSchedule()
                        .withIntervalInSeconds(2) 	//每隔2秒执行一次，如果要无线循环则改为repeatForever()
                        .withRepeatCount(10)) 		//总共执行11次(第一次执行不基数)
                .build();

        //定义一个JobDetail
        JobDetail job = newJob(MailJob.class) 		//指定干活的类MailJob，该类要继承Job
                .withIdentity("mailjob1", "mailgroup") 	//定义任务名称和分组
                .usingJobData("email", "admin@10086.com") //定义属性，可以在MailJob中获取
                .build();
	//job.getJobDataMap().put("email", "admin@taobao.com");	//也可以这样定义属性

        //调度加入这个job,返回的是开始运行的时间Date
        scheduler.scheduleJob(job, trigger);

        //启动
        scheduler.start();

        //等待20秒，让前面的任务都执行完了之后，再关闭调度器
        Thread.sleep(20000);
        scheduler.shutdown(true);
    }
}

=========================MailJob.java
import org.quartz.Job;
import org.quartz.JobDetail;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;

public class MailJob implements Job {
    //该job执行的操作写在它的execute方法中
    public void execute(JobExecutionContext context) throws JobExecutionException {

        JobDetail detail = context.getJobDetail();		//获取与它绑定的detail

        String email = detail.getJobDataMap().getString("email");//获取detail设置的属性值
	
	//操作
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
        String now = sdf.format(new  Date());
        System.out.printf("给邮件地址 %s 发出了一封定时邮件, 当前时间是: %s%n" ,email, now);
    }
}
